@inject DaySolverFactory SolverFactory
@inject ILogger<DaySolution> logger

<MudPaper Class="d-flex flex-column align-center justify-center mud-width-full py-8">
    <MudText Typo="Typo.h3">Day @Day</MudText>
    <MudExpansionPanels>
        <CascadingValue Value="daySolver">
            <PartSolutionDisplay Part="1" />
            <PartSolutionDisplay Part="2" />
        </CascadingValue>
    </MudExpansionPanels>
</MudPaper>

@code {
    [Parameter]
    public int Day { get; set; }

    private IDaySolver daySolver = null!;

    private string Part1Solution { get; set; } = null!;
    private string Part2Solution { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        daySolver = SolverFactory.GetDaySolver(Day);
        await daySolver.InitializeAsync();
    }

    private async Task Part1ExpandedChanged(bool newVal)
    {
        if (newVal)
        {
            Part1Solution = await daySolver.SolvePartOneAsync();
            logger.LogInformation("Part 1 solution: {part1Solution}", Part1Solution);
        }
        else
        {
            // Reset after a while to prevent sudden collapse.
            Task.Delay(350).ContinueWith(t => Part1Solution = string.Empty).AndForget();
        }
    }

    private async Task Part2ExpandedChanged(bool newVal)
    {
        if (newVal)
        {
            Part2Solution = await daySolver.SolvePartTwoAsync();
            logger.LogInformation("Part 2 solution: {part2Solution}", Part2Solution);
        }
        else
        {
            // Reset after a while to prevent sudden collapse.
            Task.Delay(350).ContinueWith(t => Part2Solution = string.Empty).AndForget();
        }
    }
}
